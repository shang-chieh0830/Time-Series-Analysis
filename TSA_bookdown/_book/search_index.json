[["index.html", "Time-Series-Analysis Chapter 1 About", " Time-Series-Analysis shang-chieh0830 2023-02-28 Chapter 1 About This book is a concise lecture note about Time Series Analysis. The content of this book is from the course Time Series Analysis taught by Chris Bilder. You can check his YouTube channel to get full(and correct) information about this course. Again, I do NOT own the content of this book. I write this book only for studying. All credits belong to Chris Bilder. If there is any copyright concerns, I will make this book private ASAP. "],["introduction-to-r.html", "Chapter 2 Introduction to R 2.1 Basic Operation 2.2 Vectors 2.3 Files 2.4 Regression 2.5 Object-Oriented Language", " Chapter 2 Introduction to R We will go over some of the basic R operations in this section. If you have questions, you should check Chris Bilder’s website for full information. 2.1 Basic Operation 2+2 #&gt; [1] 4 2^3 #&gt; [1] 8 # calculate the cdf of std. normal pnorm(1.96) # 1.96 is the quantile #&gt; [1] 0.9750021 log(1) #&gt; [1] 0 sin(pi/2) #&gt; [1] 1 3/4 #&gt; [1] 0.75 save &lt;- 2+2 save #&gt; [1] 4 objects() #&gt; [1] &quot;save&quot; ls() #&gt; [1] &quot;save&quot; # quit operaiton # q() 2.2 Vectors x &lt;- c(1,2,3,4,5) x #&gt; [1] 1 2 3 4 5 sd(x) #&gt; [1] 1.581139 mysd &lt;- function(x){ cat(&quot; My data \\n&quot;, x, &quot;\\n has std deviation&quot;,sqrt(var(x))) } mysd(x) #&gt; My data #&gt; 1 2 3 4 5 #&gt; has std deviation 1.581139 pnorm(q=1.96, mean=1.96, sd=1) #&gt; [1] 0.5 The full syntax for pnorm() is pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) pnorm(q=c(-1.96,1.96)) #&gt; [1] 0.0249979 0.9750021 x &lt;- c(3.68, -3.63, 0.80, 3.03, -9.86, -8.66, -2.38, 8.94, 0.52, 1.25) y &lt;- c(0.55, 1.65, 0.98, -0.07, -0.01, -0.31, -0.34, -1.38, -1.32, 0.53) x+y #&gt; [1] 4.23 -1.98 1.78 2.96 -9.87 -8.97 -2.72 7.56 -0.80 #&gt; [10] 1.78 x*y #&gt; [1] 2.0240 -5.9895 0.7840 -0.2121 0.0986 2.6846 #&gt; [7] 0.8092 -12.3372 -0.6864 0.6625 mean(x) #&gt; [1] -0.631 x-mean(x) #&gt; [1] 4.311 -2.999 1.431 3.661 -9.229 -8.029 -1.749 9.571 #&gt; [9] 1.151 1.881 x*2 #&gt; [1] 7.36 -7.26 1.60 6.06 -19.72 -17.32 -4.76 17.88 #&gt; [9] 1.04 2.50 The element(elt)-wise operation makes our life easier. 2.3 Files Click gpa.csv to download the GPA csv file. Click gpa.txt to download the GPA txt file. getwd() #&gt; [1] &quot;/Users/weishangjie/Desktop/Time-Series-Analysis&quot; gpatxt &lt;- read.table(&quot;gpa.txt&quot;, header=TRUE, sep=&quot;&quot;) gpacsv &lt;- read.csv(&quot;gpa.csv&quot;) gpacsv$HSGPA #&gt; [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39 #&gt; [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88 gpacsv$CollegeGPA #&gt; [1] 3.10 2.30 3.00 2.45 2.50 3.70 3.40 2.60 2.80 3.60 2.00 #&gt; [12] 2.90 3.30 3.20 2.80 2.40 2.60 3.80 2.20 2.60 gpacsv[1,1] # [row, col] #&gt; [1] 3.04 gpacsv[,1] #&gt; [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39 #&gt; [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88 gpacsv[c(1,3,5),2] #&gt; [1] 3.1 3.0 2.5 gpacsv[,&quot;HSGPA&quot;] #&gt; [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39 #&gt; [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88 summary(gpacsv) #&gt; HSGPA CollegeGPA #&gt; Min. :1.980 Min. :2.000 #&gt; 1st Qu.:2.380 1st Qu.:2.487 #&gt; Median :2.830 Median :2.800 #&gt; Mean :2.899 Mean :2.862 #&gt; 3rd Qu.:3.127 3rd Qu.:3.225 #&gt; Max. :4.320 Max. :3.800 plot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = &quot;HS GPA&quot;, ylab = &quot;College GPA&quot;, main = &quot;College GPA vs. HS GPA&quot;, xlim = c(0,4.5), ylim = c(0,4.5), col = &quot;red&quot;, pch = 1, cex = 1.0, panel.first = grid(col = &quot;gray&quot;, lty = &quot;dotted&quot;)) The plot() function creates a two dimensional plot of data. Here are descriptions of its arguments: x specifies what is plotted for the x-axis. y specifies what is plotted for the y-axis. xlab and ylab specify the x-axis and y-axis labels, respectively. main specifies the main title of the plot. xlim and ylim specify the x-axis and y-axis limits, respectively. Notice the use of the c() function. col specifies the color of the plotting points. Run the colors() function to see what possible colors can be used. Also, you can see Here for the colors from colors(). pch specifies the plotting characters. cexspecifies the height of the plotting characters. The value 1.0 is the default. panel.first = grid() specifies grid lines will be plotted. The line types can be specified as follows: 1=solid, 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash or as one of the character strings \"blank\", \"solid\", \"dashed\", \"dotted\", \"dotdash\", \"longdash\", or \"twodash\". These line type specifications can be used in other functions. The par()(parameter) function’s Help contains more information about the different plotting options! 2.4 Regression Our is model is:\\[CollegeGPA=\\beta_0+\\beta_1HSGPA+\\epsilon\\] mod.fit &lt;- lm(formula= CollegeGPA~ HSGPA, data=gpacsv) mod.fit #&gt; #&gt; Call: #&gt; lm(formula = CollegeGPA ~ HSGPA, data = gpacsv) #&gt; #&gt; Coefficients: #&gt; (Intercept) HSGPA #&gt; 1.0869 0.6125 names(mod.fit) #&gt; [1] &quot;coefficients&quot; &quot;residuals&quot; &quot;effects&quot; #&gt; [4] &quot;rank&quot; &quot;fitted.values&quot; &quot;assign&quot; #&gt; [7] &quot;qr&quot; &quot;df.residual&quot; &quot;xlevels&quot; #&gt; [10] &quot;call&quot; &quot;terms&quot; &quot;model&quot; mod.fit$coefficients #&gt; (Intercept) HSGPA #&gt; 1.0868795 0.6124941 round(mod.fit$residuals[1:5],2) #&gt; 1 2 3 4 5 #&gt; 0.15 -0.23 0.26 -0.20 -0.32 library(tidyverse) #&gt; ── Attaching packages ─────────────────── tidyverse 1.3.2 ── #&gt; ✔ ggplot2 3.4.1 ✔ purrr 1.0.1 #&gt; ✔ tibble 3.1.8 ✔ dplyr 1.1.0 #&gt; ✔ tidyr 1.3.0 ✔ stringr 1.5.0 #&gt; ✔ readr 2.1.4 ✔ forcats 0.5.2 #&gt; ── Conflicts ────────────────────── tidyverse_conflicts() ── #&gt; ✖ dplyr::filter() masks stats::filter() #&gt; ✖ dplyr::lag() masks stats::lag() save.fit &lt;- data.frame(gpacsv, C.GPA.hat = round(mod.fit$fitted.values,2), residuals = round(mod.fit$residuals,2)) save.fit %&gt;% head() #&gt; HSGPA CollegeGPA C.GPA.hat residuals #&gt; 1 3.04 3.10 2.95 0.15 #&gt; 2 2.35 2.30 2.53 -0.23 #&gt; 3 2.70 3.00 2.74 0.26 #&gt; 4 2.55 2.45 2.65 -0.20 #&gt; 5 2.83 2.50 2.82 -0.32 #&gt; 6 4.32 3.70 3.73 -0.03 summary(mod.fit) #&gt; #&gt; Call: #&gt; lm(formula = CollegeGPA ~ HSGPA, data = gpacsv) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -0.55074 -0.25086 0.01633 0.24242 0.77976 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 1.0869 0.3666 2.965 0.008299 ** #&gt; HSGPA 0.6125 0.1237 4.953 0.000103 *** #&gt; --- #&gt; Signif. codes: #&gt; 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 0.3437 on 18 degrees of freedom #&gt; Multiple R-squared: 0.5768, Adjusted R-squared: 0.5533 #&gt; F-statistic: 24.54 on 1 and 18 DF, p-value: 0.0001027 Hence, our estimated regression model is\\[ \\hat{collge.GPA}=\\hat{\\beta_0}+\\hat{\\beta_1}HS.GPA =1.0869+0.6125HS.GPA\\] # Open a new graphics window # device new dev.new(width = 8, height = 6, pointsize = 10) # 1 row and 2 columns of plots par(mfrow = c(1,2)) # par= graphic parameter # mfrow= make a frame by row # Same scatter plot as before plot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = &quot;HS GPA&quot;, ylab = &quot;College GPA&quot;, main = &quot;College GPA vs. HS GPA&quot;, xlim = c(0,4.5), ylim = c(0,4.5), col = &quot;red&quot;, pch = 1, cex = 1.0, panel.first = grid(col = &quot;gray&quot;, lty = &quot;dotted&quot;)) # Puts the line y = a + bx on the plot abline(a = mod.fit$coefficients[1], b = mod.fit$coefficients[2], lty = &quot;solid&quot;, col = &quot;blue&quot;, lwd = 2) # Same scatter plot as before plot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = &quot;HS GPA&quot;, ylab = &quot;College GPA&quot;, main = &quot;College GPA vs. HS GPA&quot;, xlim = c(0,4.5), ylim = c(0,4.5), col = &quot;red&quot;, pch = 1, cex = 1.0, panel.first = grid(col = &quot;gray&quot;, lty = &quot;dotted&quot;)) # Add line # expr= math expression curve(expr = mod.fit$coefficients[1] + mod.fit$coefficients[2]*x, xlim = c(min(gpacsv$HSGPA),max(gpacsv$HSGPA)), col= &quot;blue&quot;, add = TRUE, lwd = 2) The dev.new() function can be used to open a new plotting window. The abline() function can be used to draw straight lines on a plot. In the format used here, the line y = a + bx was drawn where a was the (intercept) and b was the (slope). In the second plot, the curve() function was used to draw the line on the plot. This was done to have the line within the range of the high school GPA values. Let’s use function to automate what we have done. my.reg.func &lt;- function(x, y, data) { # Fit the simple linear regression model and save the results in mod.fit mod.fit &lt;- lm(formula = y ~ x, data = data) #Open a new graphics window - do not need to dev.new(width = 6, height = 6, pointsize = 10) # Same scatter plot as before plot(x = x, y = y, xlab = &quot;x&quot;, ylab = &quot;y&quot;, main = &quot;y vs. x&quot;, panel.first=grid(col = &quot;gray&quot;, lty = &quot;dotted&quot;)) # Plot model curve(expr = mod.fit$coefficients[1] + mod.fit$coefficients[2]*x, xlim = c(min(x),max(x)), col = &quot;blue&quot;, add = TRUE) # This is the object returned mod.fit } save.it &lt;- my.reg.func(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, data = gpacsv) To get specific x-axis or y-axis tick marks on a plot, use the axis() function. For example, #Note that xaxt = &quot;n&quot; tells R to not give any labels on the # x-axis (yaxt = &quot;n&quot; works for y-axis) plot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = &quot;HS GPA&quot;, ylab = &quot;College GPA&quot;, main = &quot;College GPA vs. HS GPA&quot;, xaxt = &quot;n&quot;, xlim = c(0, 4.5), ylim = c(0, 4.5), col = &quot;red&quot;, pch = 1) plot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = &quot;HS GPA&quot;, ylab = &quot;College GPA&quot;, main = &quot;College GPA vs. HS GPA&quot;, xaxt = &quot;n&quot;, xlim = c(0, 4.5), ylim = c(0, 4.5), col = &quot;red&quot;, pch = 1) #Major tick marks axis(side = 1, at = seq(from = 0, to = 4.5, by = 0.5)) plot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = &quot;HS GPA&quot;, ylab = &quot;College GPA&quot;, main = &quot;College GPA vs. HS GPA&quot;, xaxt = &quot;n&quot;, xlim = c(0, 4.5), ylim = c(0, 4.5), col = &quot;red&quot;, pch = 1) #Major tick marks axis(side = 1, at = seq(from = 0, to = 4.5, by = 0.5)) #Minor tick marks axis(side = 1, at = seq(from = 0, to = 4.5, by = 0.1), tck = 0.01, labels = FALSE) 2.5 Object-Oriented Language Functions are typically designed to operate on only one or very few classes of objects. However, some functions, like summary(), are generic, in the sense that essentially different versions of them have been constructed to work with different classes of objects. When a generic function is run with an object, R first checks the object’s class type and then looks to find a method function with the name format &lt;generic function&gt;.&lt;class name&gt;. Below are examples for summary(): summary(mod.fit) – The function summary.lm() summarizes the regression model summary(gpacsv) – The function summary.data.frame() summarizes the data frame’s contents summary.default() – R attempts to run this function if there is no method function for a class There are many generic functions! For example, plot() is a generic function (tryplot(mod.fit) to see what happens!). We will also see other generic functions like predict() later in the notes. plot(mod.fit) The purpose of generic functions is to use a familiar language set with any object. So it is convenient to use the same language set no matter the application. This is why R is referred to as an object-oriented language. To see a list of all method functions associated with a class, use methods(class = &lt;class name&gt;). For the regression example, the method functions associated with the lm class are: methods(class=&quot;lm&quot;) %&gt;% head() #&gt; [1] &quot;add1.lm&quot; &quot;alias.lm&quot; #&gt; [3] &quot;anova.lm&quot; &quot;case.names.lm&quot; #&gt; [5] &quot;coerce,oldClass,S3-method&quot; &quot;confint.lm&quot; To see a list of all method functions for a generic function, use methods(generic.function = &lt;generic function name&gt;) methods(generic.function = &quot;summary&quot;) %&gt;% head() #&gt; [1] &quot;summary,ANY-method&quot; #&gt; [2] &quot;summary,DBIObject-method&quot; #&gt; [3] &quot;summary.aov&quot; #&gt; [4] &quot;summary.aovlist&quot; #&gt; [5] &quot;summary.aspell&quot; #&gt; [6] &quot;summary.check_packages_in_dir&quot; Knowing what a name of a particular method function can be helpful to find help on it. For example, the help for summary() alone is not very helpful! However, the help for summary.lm()provides a lot of useful information about what is summarized for a regression model. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
