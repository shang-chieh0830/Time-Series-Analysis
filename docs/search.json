[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book concise lecture note Time Series Analysis.content book course Time Series Analysis taught Chris Bilder. can check YouTube channel get full(correct) information course., content book. write book studying. credits belong Chris Bilder.copyright concerns, make book private ASAP.","code":""},{"path":"introduction-to-r.html","id":"introduction-to-r","chapter":"2 Introduction to R","heading":"2 Introduction to R","text":"go basic R operations chapter.questions, check Chris Bilder’s website full information.","code":""},{"path":"introduction-to-r.html","id":"basic-operation","chapter":"2 Introduction to R","heading":"2.1 Basic Operation","text":"","code":"\n2+2\n#> [1] 4\n2^3\n#> [1] 8\n# calculate the cdf of std. normal\npnorm(1.96) # 1.96 is the quantile\n#> [1] 0.9750021\nlog(1)\n#> [1] 0\nsin(pi/2)\n#> [1] 1\n3/4\n#> [1] 0.75\nsave <- 2+2\nsave\n#> [1] 4\nobjects()\n#> [1] \"save\"\nls()\n#> [1] \"save\"\n# quit operaiton\n# q() "},{"path":"introduction-to-r.html","id":"vectors","chapter":"2 Introduction to R","heading":"2.2 Vectors","text":"full syntax pnorm() pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)element(elt)-wise operation makes life easier.","code":"\nx <- c(1,2,3,4,5)\nx\n#> [1] 1 2 3 4 5\nsd(x)\n#> [1] 1.581139\nmysd <- function(x){\n  cat(\" My data \\n\", x, \"\\n has std deviation\",sqrt(var(x)))\n}\n\n\nmysd(x)\n#>  My data \n#>  1 2 3 4 5 \n#>  has std deviation 1.581139\npnorm(q=1.96, mean=1.96, sd=1)\n#> [1] 0.5\npnorm(q=c(-1.96,1.96))\n#> [1] 0.0249979 0.9750021\nx <- c(3.68, -3.63, 0.80, 3.03, -9.86, -8.66, \n    -2.38, 8.94, 0.52, 1.25) \n\ny <- c(0.55, 1.65, 0.98, -0.07, -0.01, -0.31, \n    -0.34, -1.38, -1.32, 0.53)\n\nx+y\n#>  [1]  4.23 -1.98  1.78  2.96 -9.87 -8.97 -2.72  7.56 -0.80\n#> [10]  1.78\n\nx*y\n#>  [1]   2.0240  -5.9895   0.7840  -0.2121   0.0986   2.6846\n#>  [7]   0.8092 -12.3372  -0.6864   0.6625\nmean(x)\n#> [1] -0.631\nx-mean(x)\n#>  [1]  4.311 -2.999  1.431  3.661 -9.229 -8.029 -1.749  9.571\n#>  [9]  1.151  1.881\n\nx*2\n#>  [1]   7.36  -7.26   1.60   6.06 -19.72 -17.32  -4.76  17.88\n#>  [9]   1.04   2.50"},{"path":"introduction-to-r.html","id":"files","chapter":"2 Introduction to R","heading":"2.3 Files","text":"Click gpa.csv download GPA csv file.Click gpa.txt download GPA txt file.\nplot() function creates two dimensional plot data.descriptions arguments:x specifies plotted x-axis.x specifies plotted x-axis.y specifies plotted y-axis.y specifies plotted y-axis.xlab ylab specify x-axis y-axis labels, respectively.xlab ylab specify x-axis y-axis labels, respectively.main specifies main title plot.main specifies main title plot.xlim ylim specify x-axis y-axis limits, respectively.\nNotice use c() function.\nxlim ylim specify x-axis y-axis limits, respectively.Notice use c() function.col specifies color plotting points.\nRun colors() function see possible colors can used.\nAlso, can see colors colors().\ncol specifies color plotting points.Run colors() function see possible colors can used.Also, can see colors colors().pch specifies plotting characters.pch specifies plotting characters.cexspecifies height plotting characters.\nvalue 1.0 default.cexspecifies height plotting characters.\nvalue 1.0 default.panel.first = grid() specifies grid lines plotted.panel.first = grid() specifies grid lines plotted.line types can specified follows:\n1=solid, 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash one character strings \"blank\", \"solid\", \"dashed\", \"dotted\",  \"dotdash\", \"longdash\", \"twodash\".\nline type specifications can used functions.line types can specified follows:\n1=solid, 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash one character strings \"blank\", \"solid\", \"dashed\", \"dotted\",  \"dotdash\", \"longdash\", \"twodash\".\nline type specifications can used functions.par()(parameter) function’s Help contains information different plotting options!par()(parameter) function’s Help contains information different plotting options!","code":"\ngetwd()\n#> [1] \"/Users/weishangjie/Documents/GitHub/Time-Series-Analysis\"\ngpatxt <- read.table(\"gpa.txt\", header=TRUE, sep=\"\")\ngpacsv <- read.csv(\"gpa.csv\")\ngpacsv$HSGPA\n#>  [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39\n#> [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88\ngpacsv$CollegeGPA\n#>  [1] 3.10 2.30 3.00 2.45 2.50 3.70 3.40 2.60 2.80 3.60 2.00\n#> [12] 2.90 3.30 3.20 2.80 2.40 2.60 3.80 2.20 2.60\ngpacsv[1,1] # [row, col]\n#> [1] 3.04\ngpacsv[,1]\n#>  [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39\n#> [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88\ngpacsv[c(1,3,5),2]\n#> [1] 3.1 3.0 2.5\ngpacsv[,\"HSGPA\"]\n#>  [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39\n#> [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88\nsummary(gpacsv)\n#>      HSGPA         CollegeGPA   \n#>  Min.   :1.980   Min.   :2.000  \n#>  1st Qu.:2.380   1st Qu.:2.487  \n#>  Median :2.830   Median :2.800  \n#>  Mean   :2.899   Mean   :2.862  \n#>  3rd Qu.:3.127   3rd Qu.:3.225  \n#>  Max.   :4.320   Max.   :3.800\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA,\n     xlab = \"HS GPA\", ylab = \"College GPA\", \n     main = \"College GPA vs. HS GPA\", \n     xlim = c(0,4.5), ylim = c(0,4.5), col = \"red\", \n    pch = 1, cex = 1.0, panel.first = grid(col = \"gray\", lty \n    = \"dotted\"))"},{"path":"introduction-to-r.html","id":"regression","chapter":"2 Introduction to R","heading":"2.4 Regression","text":"model :\\[CollegeGPA=\\beta_0+\\beta_1HSGPA+\\epsilon\\]Hence, estimated regression model \\[ \\hat{collge.GPA}=\\hat{\\beta_0}+\\hat{\\beta_1}HS.GPA\n=1.0869+0.6125HS.GPA\\]dev.new() function can used open new plotting window.dev.new() function can used open new plotting window.abline() function can used draw straight lines plot. format used , line y = + bx drawn (intercept) b (slope).abline() function can used draw straight lines plot. format used , line y = + bx drawn (intercept) b (slope).second plot, curve() function used draw line plot. done line within range high school GPA values.second plot, curve() function used draw line plot. done line within range high school GPA values.Let’s use function automate done.get specific x-axis y-axis tick marks plot, use axis() function. example,","code":"\nmod.fit <- lm(formula= CollegeGPA~ HSGPA, data=gpacsv)\nmod.fit\n#> \n#> Call:\n#> lm(formula = CollegeGPA ~ HSGPA, data = gpacsv)\n#> \n#> Coefficients:\n#> (Intercept)        HSGPA  \n#>      1.0869       0.6125\nnames(mod.fit)\n#>  [1] \"coefficients\"  \"residuals\"     \"effects\"      \n#>  [4] \"rank\"          \"fitted.values\" \"assign\"       \n#>  [7] \"qr\"            \"df.residual\"   \"xlevels\"      \n#> [10] \"call\"          \"terms\"         \"model\"\nmod.fit$coefficients\n#> (Intercept)       HSGPA \n#>   1.0868795   0.6124941\nround(mod.fit$residuals[1:5],2)\n#>     1     2     3     4     5 \n#>  0.15 -0.23  0.26 -0.20 -0.32\nlibrary(tidyverse)\n#> ── Attaching packages ─────────────────── tidyverse 1.3.2 ──\n#> ✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n#> ✔ tibble  3.1.8     ✔ dplyr   1.1.0\n#> ✔ tidyr   1.3.0     ✔ stringr 1.5.0\n#> ✔ readr   2.1.4     ✔ forcats 0.5.2\n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\nsave.fit <- data.frame(gpacsv, C.GPA.hat = \n    round(mod.fit$fitted.values,2), residuals = \n    round(mod.fit$residuals,2))\n\nsave.fit %>% head()\n#>   HSGPA CollegeGPA C.GPA.hat residuals\n#> 1  3.04       3.10      2.95      0.15\n#> 2  2.35       2.30      2.53     -0.23\n#> 3  2.70       3.00      2.74      0.26\n#> 4  2.55       2.45      2.65     -0.20\n#> 5  2.83       2.50      2.82     -0.32\n#> 6  4.32       3.70      3.73     -0.03\nsummary(mod.fit)\n#> \n#> Call:\n#> lm(formula = CollegeGPA ~ HSGPA, data = gpacsv)\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -0.55074 -0.25086  0.01633  0.24242  0.77976 \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)   1.0869     0.3666   2.965 0.008299 ** \n#> HSGPA         0.6125     0.1237   4.953 0.000103 ***\n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 0.3437 on 18 degrees of freedom\n#> Multiple R-squared:  0.5768, Adjusted R-squared:  0.5533 \n#> F-statistic: 24.54 on 1 and 18 DF,  p-value: 0.0001027\n# Open a new graphics window \n# device new\ndev.new(width = 8, height = 6, pointsize = 10)\n\n\n# 1 row and 2 columns of plots\npar(mfrow = c(1,2))\n# par= graphic parameter\n# mfrow= make a frame by row\n\n# Same scatter plot as before\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS \n    GPA\", ylab = \"College GPA\", main = \"College GPA vs. \n    HS GPA\", xlim = c(0,4.5), ylim = c(0,4.5), col = \n    \"red\", pch = 1, cex = 1.0, panel.first = grid(col = \n    \"gray\", lty = \"dotted\"))\n    \n# Puts the line y = a + bx on the plot\nabline(a = mod.fit$coefficients[1], b = \n    mod.fit$coefficients[2], lty = \"solid\", col = \n    \"blue\", lwd = 2)\n    \n\n# Same scatter plot as before\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS \n    GPA\", ylab = \"College GPA\", main = \"College GPA vs. \n    HS GPA\", xlim = c(0,4.5), ylim = c(0,4.5), col = \n    \"red\", pch = 1, cex = 1.0, panel.first = grid(col = \n    \"gray\", lty = \"dotted\"))\n\n\n# Add line\n# expr= math expression\ncurve(expr = mod.fit$coefficients[1] + \n    mod.fit$coefficients[2]*x, \n    xlim = c(min(gpacsv$HSGPA),max(gpacsv$HSGPA)), \n    col= \"blue\", add = TRUE, lwd = 2)\nmy.reg.func <- function(x, y, data) {\n\n    # Fit the simple linear regression model and save the results in mod.fit\n    mod.fit <- lm(formula = y ~ x, data = data)\n\n    #Open a new graphics window - do not need to\n    dev.new(width = 6, height = 6, pointsize = 10)\n\n    # Same scatter plot as before\n    plot(x = x, y = y, xlab = \"x\", ylab = \"y\", main = \"y vs. x\", panel.first=grid(col = \"gray\", lty = \n      \"dotted\"))\n\n    # Plot model\n    curve(expr = mod.fit$coefficients[1] + \n      mod.fit$coefficients[2]*x, xlim = c(min(x),max(x)), \n      col = \"blue\", add = TRUE)\n\n    # This is the object returned\n    mod.fit\n  }\nsave.it <- my.reg.func(x = gpacsv$HSGPA, y = \n    gpacsv$CollegeGPA, data = gpacsv)\n#Note that xaxt = \"n\" tells R to not give any labels on the \n#  x-axis (yaxt = \"n\" works for y-axis)\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS GPA\", \n     ylab = \"College GPA\", main = \"College GPA vs. HS GPA\", \n     xaxt = \"n\", xlim = c(0, 4.5), ylim = c(0, 4.5), col = \n     \"red\", pch = 1)\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS GPA\", \n     ylab = \"College GPA\", main = \"College GPA vs. HS GPA\", \n     xaxt = \"n\", xlim = c(0, 4.5), ylim = c(0, 4.5), col = \n     \"red\", pch = 1)\n     \n#Major tick marks\naxis(side = 1, at = seq(from = 0, to = 4.5, by = 0.5)) \nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS GPA\", \n     ylab = \"College GPA\", main = \"College GPA vs. HS GPA\", \n     xaxt = \"n\", xlim = c(0, 4.5), ylim = c(0, 4.5), col = \n     \"red\", pch = 1)\n     \n#Major tick marks\naxis(side = 1, at = seq(from = 0, to = 4.5, by = 0.5)) \n\n#Minor tick marks\naxis(side = 1, at = seq(from = 0, to = 4.5, by = 0.1), tck \n      = 0.01, labels = FALSE) "},{"path":"introduction-to-r.html","id":"object-oriented-language","chapter":"2 Introduction to R","heading":"2.5 Object-Oriented Language","text":"Functions typically designed operate one classes objects. However, functions, like summary(), generic, sense essentially different versions constructed work different classes objects.generic function run object, R first checks object’s class type looks find method function name format <generic function>.<class name>. examples summary():summary(mod.fit) – function summary.lm() summarizes regression modelsummary(gpacsv) – function summary.data.frame() summarizes data frame’s contentssummary.default() – R attempts run function method function classThere many generic functions! example, plot() generic function (tryplot(mod.fit) see happens!). also see generic functions like predict() later notes.purpose generic functions use familiar language set object. convenient use language set matter application. R referred object-oriented language.see list method functions associated class, use methods(class = <class name>). regression example, method functions associated lm class :see list method functions generic function, use methods(generic.function = <generic function name>)Knowing name particular method function can helpful find help . example, help summary() alone helpful! However, help summary.lm()provides lot useful information summarized regression model.","code":"\nplot(mod.fit)\nmethods(class=\"lm\") %>% head()\n#> [1] \"add1.lm\"                   \"alias.lm\"                 \n#> [3] \"anova.lm\"                  \"case.names.lm\"            \n#> [5] \"coerce,oldClass,S3-method\" \"confint.lm\"\nmethods(generic.function = \"summary\") %>% head()\n#> [1] \"summary,ANY-method\"           \n#> [2] \"summary,DBIObject-method\"     \n#> [3] \"summary.aov\"                  \n#> [4] \"summary.aovlist\"              \n#> [5] \"summary.aspell\"               \n#> [6] \"summary.check_packages_in_dir\""},{"path":"time-series-basics-plotting.html","id":"time-series-basics-plotting","chapter":"3 Time Series Basics-Plotting","heading":"3 Time Series Basics-Plotting","text":"chapter, go Time Series examples.\naim chapter help grasp ideas plotting.","code":""},{"path":"time-series-basics-plotting.html","id":"example-data","chapter":"3 Time Series Basics-Plotting","heading":"3.1 Example Data","text":"Click OSU_enroll.csv download data.Altenatively, can thing using ggplot.x specified plot() function, R puts y-axis uses observation number x-axis.Compare next plot x y arguments specified.","code":"\nosu.enroll <- read.csv(file = \"OSU_enroll.csv\", \n    stringsAsFactors = TRUE)\nhead(osu.enroll)\n#>   t Semester Year Enrollment      date\n#> 1 1     Fall 1989      20110 8/31/1989\n#> 2 2   Spring 1990      19128  2/1/1990\n#> 3 3   Summer 1990       7553  6/1/1990\n#> 4 4     Fall 1990      19591 8/31/1990\n#> 5 5   Spring 1991      18361  2/1/1991\n#> 6 6   Summer 1991       6702  6/1/1991\ntail(osu.enroll)\n#>     t Semester Year Enrollment      date\n#> 35 35   Spring 2001      20004  2/1/2001\n#> 36 36   Summer 2001       7558  6/1/2001\n#> 37 37     Fall 2001      21872 8/31/2001\n#> 38 38   Spring 2002      20922  2/1/2002\n#> 39 39   Summer 2002       7868  6/1/2002\n#> 40 40     Fall 2002      22992 8/31/2002\nx <- osu.enroll$Enrollment\n#One way to do plot\ndev.new(width = 8, height = 6, pointsize = 10) \n\n# we did not specify y-axis and R put our x in y-axis, time in  x-axis\n\nplot(x = x, ylab = \"OSU Enrollment\", \n       xlab = \"t (time)\", type=\"l\", col = \"red\", \n       main = \"OSU Enrollment from Fall 1989 to Fall 2002\", \n       panel.first = grid(col = \"gray\", lty = \"dotted\"))\ndev.new(width = 8, height = 6, pointsize = 10) \n\n# we did not specify y-axis and R put our x in y-axis, time in  x-axis\n\nplot(x = x, ylab = \"OSU Enrollment\", \n       xlab = \"t (time)\", type=\"l\", col = \"red\", \n       main = \"OSU Enrollment from Fall 1989 to Fall 2002\", \n       panel.first = grid(col = \"gray\", lty = \"dotted\"))\n\npoints(x = osu.enroll$Enrollment, pch = 20, col = \"blue\")\nlibrary(ggplot2)\n\n# Create a data frame\ndf <- data.frame(osu.enroll)\n\n# Create the plot\nggplot(df, aes(x = t, y = Enrollment)) +\n  geom_line(colour = \"red\") +  # Line plot\n  geom_point(shape = 20, colour = \"blue\") +  # Add points\n  labs(x = \"t (time)\", y = \"OSU Enrollment\", \n       title = \"OSU Enrollment from Fall 1989 to Fall 2002\") +  # Set axis labels and title\n  theme_bw() +  # Set the theme to a white background with black lines\n  theme(panel.grid.major = element_line(colour = \"gray\", linetype = \"dotted\"))  # Add gray dotted lines to the plot\n#More complicated plot\nfall <- osu.enroll[osu.enroll$Semester == \"Fall\",]\nspring <- osu.enroll[osu.enroll$Semester == \"Spring\",]\nsummer <- osu.enroll[osu.enroll$Semester == \"Summer\",]\n\nplot(y = fall$Enrollment, x = fall$t,\n    ylab = \"OSU Enrollment\", xlab = \"t (time)\", \n    col = \"blue\", \n    main = \"OSU Enrollment from Fall 1989 to Fall 2002\", \n    panel.first = grid(col = \"gray\", lty = \"dotted\"), \n    pch = 1, type = \"o\", ylim = c(0,max(osu.enroll$Enrollment)))\n\nlines(y = spring$Enrollment, x = spring$t, col = \"red\", \n    type = \"o\", pch = 2)\n\nlines(y = summer$Enrollment, x = summer$t, col = \n    \"darkgreen\", type = \"o\", pch = 3)\n    \nlegend(x=\"center\", legend= c(\"Fall\",\"Spring\",\"Summer\"), pch=c(1,2,3), lty=c(1,1,1), col=c(\"blue\",\"red\",\"darkgreen\"), bty=\"n\")\n#Another way to do plot with actual dates\nplot(y = osu.enroll$Enrollment, \n    x = as.Date(osu.enroll$date, format = \"%m/%d/%Y\"), \n    xlab = \"Time\", type = \"l\", col = \"red\",  \n    main = \"OSU Enrollment from Fall 1989 to Fall 2002\",\n    ylab = \"OSU Enrollment\")\n\npoints(y = osu.enroll$Enrollment, \n    x = as.Date(osu.enroll$date, format = \"%m/%d/%Y\"), pch \n    = 20, col = \"blue\")\n\n#Create own gridlines\n# v specifies vertical line; h specifies horizontal line\n abline(v = as.Date(c(\"1990/1/1\", \"1992/1/1\", \"1994/1/1\", \n    \"1996/1/1\", \"1998/1/1\", \"2000/1/1\", \"2002/1/1\")),\n    lty = \"dotted\", col = \"lightgray\")\n abline(h = c(10000, 15000, 20000), lty = \"dotted\", col = \n    \"lightgray\")"},{"path":"time-series-basics-plotting.html","id":"sp500-index","chapter":"3 Time Series Basics-Plotting","heading":"3.2 S&P500 Index","text":"Click SP500weekly.csv download data.","code":"\nSP500 <- read.csv(file=\"SP500weekly.csv\",stringsAsFactors = TRUE)\nhead(SP500)\n#>   WeekStart   Open   High    Low  Close AdjClose     Volume\n#> 1  1/1/1995 459.21 462.49 457.20 460.68   460.68 1199080000\n#> 2  1/8/1995 460.67 466.43 458.65 465.97   465.97 1627330000\n#> 3 1/15/1995 465.97 470.43 463.99 464.78   464.78 1667400000\n#> 4 1/22/1995 464.78 471.36 461.14 470.39   470.39 1628110000\n#> 5 1/29/1995 470.39 479.91 467.49 478.65   478.65 1888560000\n#> 6  2/5/1995 478.64 482.60 478.36 481.46   481.46 1579920000\ntail(SP500)\n#>       WeekStart    Open    High     Low   Close AdjClose\n#> 1395  9/19/2021 4402.95 4465.40 4305.91 4455.48  4455.48\n#> 1396  9/26/2021 4442.12 4457.30 4288.52 4357.04  4357.04\n#> 1397  10/3/2021 4348.84 4429.97 4278.94 4391.34  4391.34\n#> 1398 10/10/2021 4385.44 4475.82 4329.92 4471.37  4471.37\n#> 1399 10/17/2021 4463.72 4559.67 4447.47 4544.90  4544.90\n#> 1400 10/24/2021 4553.69 4608.08 4537.36 4605.38  4605.38\n#>           Volume\n#> 1395 15697030000\n#> 1396 15555390000\n#> 1397 14795520000\n#> 1398 13758090000\n#> 1399 13966070000\n#> 1400 16206040000\nx <- SP500$Close\n#One way to do plot\ndev.new(width = 8, height = 6, pointsize = 10) \n#again, we do not specify y-axis here\nplot(x = x, ylab = \"S&P 500 Index\", xlab = \"t (time)\", \n    type = \"l\", col = \"red\", main = \"S&P 500 Index from \n    1/1/1995 to 10/25/2021 (weekly)\", \n    panel.first = grid(col = \"gray\", lty = \"dotted\"))\n#Another way to do plot with actual dates\nplot(y = x, x = as.Date(SP500$WeekStart, format =\n    \"%m/%d/%Y\"), xlab = \"Time\", type = \"l\", col = \"red\", main \n    = \"S&P 500 Index from 1/1/1995 to 10/25/2021 (weekly)\",\n    ylab = \"S&P 500 Index\")\n\n#Create own gridlines\nabline(v = as.Date(c(\"1995/1/1\", \"2000/1/1\", \"2005/1/1\", \n    \"2010/1/1\", \"2015/1/1\", \"2020/1/1\")), lty = \"dotted\", \n    col = \"lightgray\")\n\nabline(h = seq(from = 0, to = 5000, by = 1000), lty = \n    \"dotted\", col = \"lightgray\")\n# One more way with fine control of the dates\nplot(y = x, x = as.Date(SP500$WeekStart, format = \n    \"%m/%d/%Y\"), xlab = \"Time\", type = \"l\", col = \"red\", \n    main = \"S&P 500 Index from 1/1/1995 to 10/25/2021 \n    (weekly)\", ylab = \"S&P 500 Index\", xaxt = \"n\")\n\naxis.Date(side = 1, at = seq(from = as.Date(\"1995/1/1\"),\n    to = as.Date(\"2021/12/31\"), by = \"years\"), labels = \n    format(x = seq(from = as.Date(\"1995/1/1\"), to = \n    as.Date(\"2021/12/31\"), by = \"years\"), format = \"%b%y\"), \n    las = 2)  #las changes orientation of labels\n\n#Create own gridlines\nabline(v = as.Date(c(\"1995/1/1\", \"2000/1/1\", \"2005/1/1\", \n    \"2010/1/1\", \"2015/1/1\", \"2020/1/1\")), lty = \"dotted\", \n    col = \"lightgray\")\nabline(h = seq(from = 0, to = 5000, by = 1000), lty = \n    \"dotted\", col = \"lightgray\")"},{"path":"time-series-basics-plotting.html","id":"sunspots","chapter":"3 Time Series Basics-Plotting","heading":"3.3 Sunspots","text":"Click SN_y_tot_V2.0.csv download data.","code":"\nsunspots <- read.table(file = \"SN_y_tot_V2.0.csv\", sep = \n    \";\", col.names = c(\"Mid.year\", \"Mean.total\", \n   \"Mean.SD.total\", \"Numb.obs.used\", \"Definitive\"))\nhead(sunspots)\n#>   Mid.year Mean.total Mean.SD.total Numb.obs.used\n#> 1   1700.5        8.3            -1            -1\n#> 2   1701.5       18.3            -1            -1\n#> 3   1702.5       26.7            -1            -1\n#> 4   1703.5       38.3            -1            -1\n#> 5   1704.5       60.0            -1            -1\n#> 6   1705.5       96.7            -1            -1\n#>   Definitive\n#> 1          1\n#> 2          1\n#> 3          1\n#> 4          1\n#> 5          1\n#> 6          1\ntail(sunspots)\n#>     Mid.year Mean.total Mean.SD.total Numb.obs.used\n#> 316   2015.5       69.8           6.4          8903\n#> 317   2016.5       39.8           3.9          9940\n#> 318   2017.5       21.7           2.5         11444\n#> 319   2018.5        7.0           1.1         12611\n#> 320   2019.5        3.6           0.5         12884\n#> 321   2020.5        8.8           4.1         14440\n#>     Definitive\n#> 316          1\n#> 317          1\n#> 318          1\n#> 319          1\n#> 320          1\n#> 321          1\ndev.new(width = 8, height = 6, pointsize = 10)\n\n#again, we did not specify y-axis here\nplot(x = sunspots$Mean.total, ylab = \"Number of \n    sunspots\", xlab = \"t (time)\", type = \"l\", col = \"red\", \n    main = \"Sunspots per year from 1700 to 2020\",\n    panel.first = grid(col = \"gray\", lty = \"dotted\"))\n\npoints(x = sunspots$Mean.total, pch = 20, col = \"blue\")\n# Include dates\nplot(y = sunspots$Mean.total, x = sunspots$Mid.year, ylab \n    = \"Number of sunspots\", xlab = \"Year\", type = \"l\", col \n    = \"red\", main = \"Sunspots per year from 1700 to 2020\",\n    panel.first = grid(col = \"gray\", lty = \"dotted\"))\n\npoints(y = sunspots$Mean.total, x = sunspots$Mid.year, \n    pch = 20, col = \"blue\")\n#Convert to an object of class \"ts\"\n\nx <- ts(data = sunspots$Mean.total, start = 1700, frequency \n    = 1)\n\nx\n#> Time Series:\n#> Start = 1700 \n#> End = 2020 \n#> Frequency = 1 \n#>   [1]   8.3  18.3  26.7  38.3  60.0  96.7  48.3  33.3  16.7\n#>  [10]  13.3   5.0   0.0   0.0   3.3  18.3  45.0  78.3 105.0\n#>  [19] 100.0  65.0  46.7  43.3  36.7  18.3  35.0  66.7 130.0\n#>  [28] 203.3 171.7 121.7  78.3  58.3  18.3   8.3  26.7  56.7\n#>  [37] 116.7 135.0 185.0 168.3 121.7  66.7  33.3  26.7   8.3\n#>  [46]  18.3  36.7  66.7 100.0 134.8 139.0  79.5  79.7  51.2\n#>  [55]  20.3  16.0  17.0  54.0  79.3  90.0 104.8 143.2 102.0\n#>  [64]  75.2  60.7  34.8  19.0  63.0 116.3 176.8 168.0 136.0\n#>  [73] 110.8  58.0  51.0  11.7  33.0 154.2 257.3 209.8 141.3\n#>  [82] 113.5  64.2  38.0  17.0  40.2 138.2 220.0 218.2 196.8\n#>  [91] 149.8 111.0 100.0  78.2  68.3  35.5  26.7  10.7   6.8\n#> [100]  11.3  24.2  56.7  75.0  71.8  79.2  70.3  46.8  16.8\n#> [109]  13.5   4.2   0.0   2.3   8.3  20.3  23.2  59.0  76.3\n#> [118]  68.3  52.9  38.5  24.2   9.2   6.3   2.2  11.4  28.2\n#> [127]  59.9  83.0 108.5 115.2 117.4  80.8  44.3  13.4  19.5\n#> [136]  85.8 192.7 227.3 168.7 143.0 105.5  63.3  40.3  18.1\n#> [145]  25.1  65.8 102.7 166.3 208.3 182.5 126.3 122.0 102.7\n#> [154]  74.1  39.0  12.7   8.2  43.4 104.4 178.3 182.2 146.6\n#> [163] 112.1  83.5  89.2  57.8  30.7  13.9  62.8 123.6 232.0\n#> [172] 185.3 169.2 110.1  74.5  28.3  18.9  20.7   5.7  10.0\n#> [181]  53.7  90.5  99.0 106.1 105.8  86.3  42.4  21.8  11.2\n#> [190]  10.4  11.8  59.5 121.7 142.0 130.0 106.6  69.4  43.8\n#> [199]  44.4  20.2  15.7   4.6   8.5  40.8  70.1 105.5  90.1\n#> [208] 102.8  80.9  73.2  30.9   9.5   6.0   2.4  16.1  79.0\n#> [217]  95.0 173.6 134.6 105.7  62.7  43.5  23.7   9.7  27.9\n#> [226]  74.0 106.5 114.7 129.7 108.2  59.4  35.1  18.6   9.2\n#> [235]  14.6  60.2 132.8 190.6 182.6 148.0 113.0  79.2  50.8\n#> [244]  27.1  16.1  55.3 154.3 214.7 193.0 190.7 118.9  98.3\n#> [253]  45.0  20.1   6.6  54.2 200.7 269.3 261.7 225.1 159.0\n#> [262]  76.4  53.4  39.9  15.0  22.0  66.8 132.9 150.0 149.4\n#> [271] 148.0  94.4  97.6  54.1  49.2  22.5  18.4  39.3 131.0\n#> [280] 220.1 218.9 198.9 162.4  91.0  60.5  20.6  14.8  33.9\n#> [289] 123.0 211.1 191.8 203.3 133.0  76.1  44.9  25.1  11.6\n#> [298]  28.9  88.3 136.3 173.9 170.4 163.6  99.3  65.3  45.8\n#> [307]  24.7  12.6   4.2   4.8  24.9  80.8  84.5  94.0 113.3\n#> [316]  69.8  39.8  21.7   7.0   3.6   8.8\nclass(x)\n#> [1] \"ts\"\n\nclass(sunspots$Mean.total)\n#> [1] \"numeric\""},{"path":"time-series-basics-plotting.html","id":"plot.ts","chapter":"3 Time Series Basics-Plotting","heading":"3.3.1 plot.ts()","text":"plot() generic function - uses plot.ts() method function","code":"\n# we did not specify y-axis here, but x is now ts\nplot(x = x, ylab = expression(paste(x[t], \" (Number of \n   sunspots)\")), xlab = \"Year\", type = \"o\", col = \"red\", main \n   = \"Sunspots per year from 1700 to 2020\")"}]
