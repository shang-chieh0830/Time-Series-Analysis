[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"book concise lecture note Time Series Analysis.content book course Time Series Analysis taught Chris Bilder. can check YouTube channel get full(correct) information course., content book. write book studying. credits belong Chris Bilder.copyright concerns, make book private ASAP.","code":""},{"path":"introduction-to-r.html","id":"introduction-to-r","chapter":"2 Introduction to R","heading":"2 Introduction to R","text":"go basic R operations section.questions, check Chris Bilder’s website full information.","code":""},{"path":"introduction-to-r.html","id":"basic-operation","chapter":"2 Introduction to R","heading":"2.1 Basic Operation","text":"","code":"\n2+2\n#> [1] 4\n2^3\n#> [1] 8\n# calculate the cdf of std. normal\npnorm(1.96) # 1.96 is the quantile\n#> [1] 0.9750021\nlog(1)\n#> [1] 0\nsin(pi/2)\n#> [1] 1\n3/4\n#> [1] 0.75\nsave <- 2+2\nsave\n#> [1] 4\nobjects()\n#> [1] \"save\"\nls()\n#> [1] \"save\"\n# quit operaiton\n# q() "},{"path":"introduction-to-r.html","id":"vectors","chapter":"2 Introduction to R","heading":"2.2 Vectors","text":"full syntax pnorm() pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)element(elt)-wise operation makes life easier.","code":"\nx <- c(1,2,3,4,5)\nx\n#> [1] 1 2 3 4 5\nsd(x)\n#> [1] 1.581139\nmysd <- function(x){\n  cat(\" My data \\n\", x, \"\\n has std deviation\",sqrt(var(x)))\n}\n\n\nmysd(x)\n#>  My data \n#>  1 2 3 4 5 \n#>  has std deviation 1.581139\npnorm(q=1.96, mean=1.96, sd=1)\n#> [1] 0.5\npnorm(q=c(-1.96,1.96))\n#> [1] 0.0249979 0.9750021\nx <- c(3.68, -3.63, 0.80, 3.03, -9.86, -8.66, \n    -2.38, 8.94, 0.52, 1.25) \n\ny <- c(0.55, 1.65, 0.98, -0.07, -0.01, -0.31, \n    -0.34, -1.38, -1.32, 0.53)\n\nx+y\n#>  [1]  4.23 -1.98  1.78  2.96 -9.87 -8.97 -2.72  7.56 -0.80\n#> [10]  1.78\n\nx*y\n#>  [1]   2.0240  -5.9895   0.7840  -0.2121   0.0986   2.6846\n#>  [7]   0.8092 -12.3372  -0.6864   0.6625\nmean(x)\n#> [1] -0.631\nx-mean(x)\n#>  [1]  4.311 -2.999  1.431  3.661 -9.229 -8.029 -1.749  9.571\n#>  [9]  1.151  1.881\n\nx*2\n#>  [1]   7.36  -7.26   1.60   6.06 -19.72 -17.32  -4.76  17.88\n#>  [9]   1.04   2.50"},{"path":"introduction-to-r.html","id":"files","chapter":"2 Introduction to R","heading":"2.3 Files","text":"Click gpa.csv download GPA csv file.Click gpa.txt download GPA txt file.\nplot() function creates two dimensional plot data.descriptions arguments:x specifies plotted x-axis.x specifies plotted x-axis.y specifies plotted y-axis.y specifies plotted y-axis.xlab ylab specify x-axis y-axis labels, respectively.xlab ylab specify x-axis y-axis labels, respectively.main specifies main title plot.main specifies main title plot.xlim ylim specify x-axis y-axis limits, respectively.\nNotice use c() function.\nxlim ylim specify x-axis y-axis limits, respectively.Notice use c() function.col specifies color plotting points.\nRun colors() function see possible colors can used.\nAlso, can see colors colors().\ncol specifies color plotting points.Run colors() function see possible colors can used.Also, can see colors colors().pch specifies plotting characters.pch specifies plotting characters.cexspecifies height plotting characters.\nvalue 1.0 default.cexspecifies height plotting characters.\nvalue 1.0 default.panel.first = grid() specifies grid lines plotted.panel.first = grid() specifies grid lines plotted.line types can specified follows:\n1=solid, 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash one character strings \"blank\", \"solid\", \"dashed\", \"dotted\",  \"dotdash\", \"longdash\", \"twodash\".\nline type specifications can used functions.line types can specified follows:\n1=solid, 2=dashed, 3=dotted, 4=dotdash, 5=longdash, 6=twodash one character strings \"blank\", \"solid\", \"dashed\", \"dotted\",  \"dotdash\", \"longdash\", \"twodash\".\nline type specifications can used functions.par()(parameter) function’s Help contains information different plotting options!par()(parameter) function’s Help contains information different plotting options!","code":"\ngetwd()\n#> [1] \"/Users/weishangjie/Desktop/Time-Series-Analysis\"\ngpatxt <- read.table(\"gpa.txt\", header=TRUE, sep=\"\")\ngpacsv <- read.csv(\"gpa.csv\")\ngpacsv$HSGPA\n#>  [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39\n#> [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88\ngpacsv$CollegeGPA\n#>  [1] 3.10 2.30 3.00 2.45 2.50 3.70 3.40 2.60 2.80 3.60 2.00\n#> [12] 2.90 3.30 3.20 2.80 2.40 2.60 3.80 2.20 2.60\ngpacsv[1,1] # [row, col]\n#> [1] 3.04\ngpacsv[,1]\n#>  [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39\n#> [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88\ngpacsv[c(1,3,5),2]\n#> [1] 3.1 3.0 2.5\ngpacsv[,\"HSGPA\"]\n#>  [1] 3.04 2.35 2.70 2.55 2.83 4.32 3.39 2.32 2.69 2.83 2.39\n#> [12] 3.65 2.85 3.83 2.22 1.98 2.88 4.00 2.28 2.88\nsummary(gpacsv)\n#>      HSGPA         CollegeGPA   \n#>  Min.   :1.980   Min.   :2.000  \n#>  1st Qu.:2.380   1st Qu.:2.487  \n#>  Median :2.830   Median :2.800  \n#>  Mean   :2.899   Mean   :2.862  \n#>  3rd Qu.:3.127   3rd Qu.:3.225  \n#>  Max.   :4.320   Max.   :3.800\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA,\n     xlab = \"HS GPA\", ylab = \"College GPA\", \n     main = \"College GPA vs. HS GPA\", \n     xlim = c(0,4.5), ylim = c(0,4.5), col = \"red\", \n    pch = 1, cex = 1.0, panel.first = grid(col = \"gray\", lty \n    = \"dotted\"))"},{"path":"introduction-to-r.html","id":"regression","chapter":"2 Introduction to R","heading":"2.4 Regression","text":"model :\\[CollegeGPA=\\beta_0+\\beta_1HSGPA+\\epsilon\\]Hence, estimated regression model \\[ \\hat{collge.GPA}=\\hat{\\beta_0}+\\hat{\\beta_1}HS.GPA\n=1.0869+0.6125HS.GPA\\]dev.new() function can used open new plotting window.dev.new() function can used open new plotting window.abline() function can used draw straight lines plot. format used , line y = + bx drawn (intercept) b (slope).abline() function can used draw straight lines plot. format used , line y = + bx drawn (intercept) b (slope).second plot, curve() function used draw line plot. done line within range high school GPA values.second plot, curve() function used draw line plot. done line within range high school GPA values.Let’s use function automate done.get specific x-axis y-axis tick marks plot, use axis() function. example,","code":"\nmod.fit <- lm(formula= CollegeGPA~ HSGPA, data=gpacsv)\nmod.fit\n#> \n#> Call:\n#> lm(formula = CollegeGPA ~ HSGPA, data = gpacsv)\n#> \n#> Coefficients:\n#> (Intercept)        HSGPA  \n#>      1.0869       0.6125\nnames(mod.fit)\n#>  [1] \"coefficients\"  \"residuals\"     \"effects\"      \n#>  [4] \"rank\"          \"fitted.values\" \"assign\"       \n#>  [7] \"qr\"            \"df.residual\"   \"xlevels\"      \n#> [10] \"call\"          \"terms\"         \"model\"\nmod.fit$coefficients\n#> (Intercept)       HSGPA \n#>   1.0868795   0.6124941\nround(mod.fit$residuals[1:5],2)\n#>     1     2     3     4     5 \n#>  0.15 -0.23  0.26 -0.20 -0.32\nlibrary(tidyverse)\n#> ── Attaching packages ─────────────────── tidyverse 1.3.2 ──\n#> ✔ ggplot2 3.4.1     ✔ purrr   1.0.1\n#> ✔ tibble  3.1.8     ✔ dplyr   1.1.0\n#> ✔ tidyr   1.3.0     ✔ stringr 1.5.0\n#> ✔ readr   2.1.4     ✔ forcats 0.5.2\n#> ── Conflicts ────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\nsave.fit <- data.frame(gpacsv, C.GPA.hat = \n    round(mod.fit$fitted.values,2), residuals = \n    round(mod.fit$residuals,2))\n\nsave.fit %>% head()\n#>   HSGPA CollegeGPA C.GPA.hat residuals\n#> 1  3.04       3.10      2.95      0.15\n#> 2  2.35       2.30      2.53     -0.23\n#> 3  2.70       3.00      2.74      0.26\n#> 4  2.55       2.45      2.65     -0.20\n#> 5  2.83       2.50      2.82     -0.32\n#> 6  4.32       3.70      3.73     -0.03\nsummary(mod.fit)\n#> \n#> Call:\n#> lm(formula = CollegeGPA ~ HSGPA, data = gpacsv)\n#> \n#> Residuals:\n#>      Min       1Q   Median       3Q      Max \n#> -0.55074 -0.25086  0.01633  0.24242  0.77976 \n#> \n#> Coefficients:\n#>             Estimate Std. Error t value Pr(>|t|)    \n#> (Intercept)   1.0869     0.3666   2.965 0.008299 ** \n#> HSGPA         0.6125     0.1237   4.953 0.000103 ***\n#> ---\n#> Signif. codes:  \n#> 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#> \n#> Residual standard error: 0.3437 on 18 degrees of freedom\n#> Multiple R-squared:  0.5768, Adjusted R-squared:  0.5533 \n#> F-statistic: 24.54 on 1 and 18 DF,  p-value: 0.0001027\n# Open a new graphics window \n# device new\ndev.new(width = 8, height = 6, pointsize = 10)\n\n\n# 1 row and 2 columns of plots\npar(mfrow = c(1,2))\n# par= graphic parameter\n# mfrow= make a frame by row\n\n# Same scatter plot as before\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS \n    GPA\", ylab = \"College GPA\", main = \"College GPA vs. \n    HS GPA\", xlim = c(0,4.5), ylim = c(0,4.5), col = \n    \"red\", pch = 1, cex = 1.0, panel.first = grid(col = \n    \"gray\", lty = \"dotted\"))\n    \n# Puts the line y = a + bx on the plot\nabline(a = mod.fit$coefficients[1], b = \n    mod.fit$coefficients[2], lty = \"solid\", col = \n    \"blue\", lwd = 2)\n    \n\n# Same scatter plot as before\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS \n    GPA\", ylab = \"College GPA\", main = \"College GPA vs. \n    HS GPA\", xlim = c(0,4.5), ylim = c(0,4.5), col = \n    \"red\", pch = 1, cex = 1.0, panel.first = grid(col = \n    \"gray\", lty = \"dotted\"))\n\n\n# Add line\n# expr= math expression\ncurve(expr = mod.fit$coefficients[1] + \n    mod.fit$coefficients[2]*x, \n    xlim = c(min(gpacsv$HSGPA),max(gpacsv$HSGPA)), \n    col= \"blue\", add = TRUE, lwd = 2)\nmy.reg.func <- function(x, y, data) {\n\n    # Fit the simple linear regression model and save the results in mod.fit\n    mod.fit <- lm(formula = y ~ x, data = data)\n\n    #Open a new graphics window - do not need to\n    dev.new(width = 6, height = 6, pointsize = 10)\n\n    # Same scatter plot as before\n    plot(x = x, y = y, xlab = \"x\", ylab = \"y\", main = \"y vs. x\", panel.first=grid(col = \"gray\", lty = \n      \"dotted\"))\n\n    # Plot model\n    curve(expr = mod.fit$coefficients[1] + \n      mod.fit$coefficients[2]*x, xlim = c(min(x),max(x)), \n      col = \"blue\", add = TRUE)\n\n    # This is the object returned\n    mod.fit\n  }\nsave.it <- my.reg.func(x = gpacsv$HSGPA, y = \n    gpacsv$CollegeGPA, data = gpacsv)\n#Note that xaxt = \"n\" tells R to not give any labels on the \n#  x-axis (yaxt = \"n\" works for y-axis)\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS GPA\", \n     ylab = \"College GPA\", main = \"College GPA vs. HS GPA\", \n     xaxt = \"n\", xlim = c(0, 4.5), ylim = c(0, 4.5), col = \n     \"red\", pch = 1)\nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS GPA\", \n     ylab = \"College GPA\", main = \"College GPA vs. HS GPA\", \n     xaxt = \"n\", xlim = c(0, 4.5), ylim = c(0, 4.5), col = \n     \"red\", pch = 1)\n     \n#Major tick marks\naxis(side = 1, at = seq(from = 0, to = 4.5, by = 0.5)) \nplot(x = gpacsv$HSGPA, y = gpacsv$CollegeGPA, xlab = \"HS GPA\", \n     ylab = \"College GPA\", main = \"College GPA vs. HS GPA\", \n     xaxt = \"n\", xlim = c(0, 4.5), ylim = c(0, 4.5), col = \n     \"red\", pch = 1)\n     \n#Major tick marks\naxis(side = 1, at = seq(from = 0, to = 4.5, by = 0.5)) \n\n#Minor tick marks\naxis(side = 1, at = seq(from = 0, to = 4.5, by = 0.1), tck \n      = 0.01, labels = FALSE) "}]
